<?xml version="1.0"?>
<!-- *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
project: "Stationery" extension for Thunderbird
filename: editor.xml
author: Łukasz 'Arivald' Płomiński <arivald@interia.pl>
description: binding for obsoleted <setting> elements.
  
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* -->

<!DOCTYPE mydialog SYSTEM "chrome://stationery/locale/stationery.dtd">

<bindings id="stationerySettingsBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml">
  
  <binding id="stationery-setting-base" extends="chrome://stationery/content/bindings/setting.xml#setting-base">  
    <implementation>
      <constructor><![CDATA[
        Components.utils.import('resource://stationery/content/stationery.jsm');
        Components.utils.import('resource://stationery/content/prefs.jsm');

        this.preferenceChanged();
        if (this.usePref)
          Stationery.registerPreferenceObserver(this.pref, this._observer, true);
      ]]></constructor>

      <field name="_observer"><![CDATA[({
        _self: this,

        QueryInterface: function(aIID) {
          const Ci = Components.interfaces;
          if (aIID.equals(Ci.nsIObserver) || aIID.equals(Ci.nsISupportsWeakReference) || aIID.equals(Ci.nsISupports))
            return this;
          throw Components.Exception("No interface", Components.results.NS_ERROR_NO_INTERFACE);
        },

        observe: function(aSubject, aTopic, aPrefName) {
          if (aTopic != "nsPref:changed") return;

          if (this._self.pref == aPrefName)
            this._self.preferenceChanged();
        }
      })]]>
      </field>

      <method name="fireEvent">
        <parameter name="eventName"/>
        <parameter name="funcStr"/>
        <body>
          <![CDATA[
            let body = funcStr || this.getAttribute(eventName);
            if (!body)
              return;

            try {
              let event = document.createEvent("Events");
              event.initEvent(eventName, true, true);
              let f = new Function("event", body);
              f.call(this, event);
            }
            catch (e) {
              Cu.reportError(e);
            }
          ]]>
        </body>
      </method>

      <method name="valueFromPreference">
        <body><![CDATA[
          try {        
            if (this.usePrefPart) {
              let prefValue = Stationery.getPref(this.pref);
              if (typeof prefValue === 'object') 
                this.value = prefValue[this.pref_part]
              else
                this.value = null;
            } else
              this.value = Stationery.getPref(this.pref);
          } catch (e) { Stationery.handleException(e); }          
        ]]></body>
      </method>

      <method name="valueToPreference">
        <body><![CDATA[
          try {
            if (this.usePrefPart) {
              let prefValue = Stationery.getPref(this.pref);
              if (typeof prefValue !== 'object') prefValue = {};
              prefValue[this.pref_part] = this.value
              Stationery.setPref(this.pref, prefValue);
            } else
              Stationery.setPref(this.pref, this.value);
          } catch (e) { Stationery.handleException(e); }          
        ]]></body>
      </method>

      <method name="inputChanged">
        <body>
        <![CDATA[
          if (this.usePref && !this._updatingInput) {
            this.valueToPreference();
            this.fireEvent("oninputchanged");
          }
        ]]>
        </body>
      </method>

      <method name="preferenceChanged">
        <body>
        <![CDATA[
          if (this.usePref) {
            this._updatingInput = true;
            try {
              this.valueFromPreference();
              this.fireEvent("onpreferencechanged");
            } catch (e) {}
            this._updatingInput = false;
          }
        ]]>
        </body>
      </method>
      
      
      <method name="setMulticontrolValue">
        <parameter name="menulistOrRadiogroup"/>
        <parameter name="value"/>
        <body><![CDATA[
          for (let i = 0; i < menulistOrRadiogroup.itemCount; i++) {
            if (menulistOrRadiogroup.getItemAtIndex(i).value == value) {
              menulistOrRadiogroup.selectedIndex = i;
              break;
            }
          }
        ]]></body>
      </method>

      <method name="getMulticontrolValue">
        <parameter name="menulistOrRadiogroup"/>
        <body><![CDATA[
          return menulistOrRadiogroup.selectedItem.value;
        ]]></body>
      </method>
      

      <property name="usePref" readonly="true" onget="return this.hasAttribute('pref');"/>
      <property name="pref" readonly="true" onget="return this.getAttribute('pref');"/>
      <property name="usePrefPart" readonly="true" onget="return this.hasAttribute('pref-part');"/>
      <property name="pref_part" readonly="true" onget="return this.getAttribute('pref-part');"/>
      <property name="type" readonly="true" onget="return this.getAttribute('type');"/>
      <property name="value" onget="return this.input.value;" onset="return this.input.value = val;"/>

      <field name="_updatingInput">false</field>
      <field name="input">document.getAnonymousElementByAttribute(this, "anonid", "input");</field>
    </implementation>
  </binding>    
        
  <binding id="setting-bool" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <xul:checkbox anonid="input" xbl:inherits="disabled,onlabel,offlabel,label=checkboxlabel" oncommand="inputChanged();"/>
      </xul:hbox>
    </content>

    <implementation>
      <property name="value" onget="return this.inverted ? !this.input.checked : this.input.checked;"
                onset="return this.input.setChecked(this.inverted ? !val : val);"/>
      <property name="inverted" readonly="true" onget="return this.getAttribute('inverted');"/>
    </implementation>
  </binding>
  
  <binding id="setting-integer" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <xul:textbox type="number" anonid="input" flex="1" oninput="inputChanged();" onchange="inputChanged();" xbl:inherits="disabled,emptytext,min,max,increment,hidespinbuttons,wraparound,style=textboxstyle"/>
      </xul:hbox>
    </content>
  </binding>

  <binding id="setting-multi" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <children includes="radiogroup|menulist"/>
      </xul:hbox>
    </content>

    <implementation>
      <constructor><![CDATA[
        this.control.addEventListener("command", this.valueToPreference.bind(this), false);
      ]]></constructor>

      <method name="valueFromPreference">
        <body><![CDATA[
          try {        
            if (this.usePrefPart) {
              let prefValue = Stationery.getPref(this.pref);
              if (typeof prefValue === 'object') {
                this.setMulticontrolValue(this.control, prefValue[this.pref_part])
              } else {
                this.setMulticontrolValue(this.control, null);
              }
            } else
              this.setMulticontrolValue(this.control, Stationery.getPref(this.pref));
          } catch (e) { Stationery.handleException(e); }          
          
        ]]></body>
      </method>

      <method name="valueToPreference">
        <body><![CDATA[
          try {
            if (this.usePrefPart) {
              let prefValue = Stationery.getPref(this.pref);
              if (typeof prefValue !== 'object') prefValue = {};
              prefValue[this.pref_part] = this.getMulticontrolValue(this.control)
              Stationery.setPref(this.pref, prefValue);
            } else
              Stationery.setPref(this.pref, this.getMulticontrolValue(this.control));
          } catch (e) { Stationery.handleException(e); }          
          
        ]]></body>
      </method>

      <field name="control">this.getElementsByTagName(this.getAttribute("type") == "radio" ? "radiogroup" : "menulist")[0];</field>
    </implementation>
  </binding>
  
  
  <binding id="setting-defsearchpath" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <xul:radiogroup anonid="option" oncommand="optionChanged();" flex="1">
          <xul:radio value="profile" label="&stationery.Options.tabOptions.DefaultSearchPath.Profile;" />
          <xul:radio value="any" label="&stationery.Options.tabOptions.DefaultSearchPath.Any;" />
          <xul:hbox align="center" style="padding-bottom: 3px;">
            <xul:textbox flex="1" anonid="path" oninput="inputChanged();" onchange="inputChanged();"/>
            <xul:vbox width="1"/>
            <xul:button anonid="button" xbl:inherits="disabled" icon="find" oncommand="browse();" label="&stationery.Options.tabOptions.DefaultSearchPath.Browse;"/>
          </xul:hbox>
        </xul:radiogroup>
      </xul:hbox>
    </content>

    <implementation>
      
      <method name="browse">
        <body><![CDATA[
          let fp = Stationery.XPCOM('nsIFilePicker');
          fp.init(window, Stationery._('options.defaultSearchPath.filepicker.title'), fp.modeGetFolder);
          
          if (this.option.value == 'profile') {
            try {
              let directory = Services.dirsvc.get('ProfD', Components.interfaces.nsIFile);
              directory.appendRelativePath(this.path.value);
              fp.displayDirectory = directory;
            } catch(e) { Stationery.handleException(e); }
            
            let profileDir = Services.dirsvc.get('ProfD', Components.interfaces.nsIFile);
            
            if (fp.show() == fp.returnOK) {
              if(profileDir.contains(fp.file, true))
                this.path.value = fp.file.path.replace(profileDir.path + Stationery.getFilePathSeparator(), '');
              else {
                if(confirm(Stationery._('options.defaultSearchPath.switchToAnyConfirm'))) {
                  this.option.value = 'any';
                  this.path.value = fp.file.path;
                }
              }
              this.inputChanged();
            }
          } else { // this.option.value == 'any'
            try {
              if (this.path.value != '' ) {
                let directory = Stationery.XPCOM('nsIFile');
                directory.initWithPath(this.path.value);
                fp.displayDirectory = directory;
              } else
                if(Stationery.OSisUnix)
                  fp.displayDirectory = Services.dirsvc.get('Home', Components.interfaces.nsIFile)
                else
                  fp.displayDirectory = Services.dirsvc.get('DeskV', Components.interfaces.nsIFile);
            } catch(e) { Stationery.handleException(e); }

            fp.open(function (rv) {
              if (rv == fp.returnOK) {
                this.path.value = fp.file.path;
                this.inputChanged();
              }
            });
          }
        ]]>
        </body>
      </method>
      
      <method name="optionChanged">
        <body><![CDATA[
          if (this.option.value == 'profile') {
            this.path.value = this._pSaver;
            if (this.path.value == '') this.path.value = 'stationery'
          } else {
            this.path.value = this._aSaver;
          }
          this.inputChanged();
        ]]></body>
      </method>

      <field name="option">document.getAnonymousElementByAttribute(this, "anonid", "option");</field>
      <field name="path">document.getAnonymousElementByAttribute(this, "anonid", "path");</field>

      <field name="_pSaver">'stationery'</field>
      <field name="_aSaver">''</field>
      <field name="button">document.getAnonymousElementByAttribute(this, "anonid", "button");</field>

      <property name="value">
        <getter><![CDATA[
          return this.option.value == 'profile' ? 'profile:///' + this.path.value : this.path.value;
        ]]></getter>
        <setter><![CDATA[
          if(val.substr(0,11) == 'profile:///') {
            this.option.value = 'profile';
            this.path.value = val.substr(11);
            this._pSaver = this.path.value;

            let directory = Services.dirsvc.get('ProfD', Components.interfaces.nsIFile);
            directory.appendRelativePath(this.path.value);
            this.tooltipText = directory.path;
            
          } else {
            this.option.value = 'any';
            this.path.value = val;
            this._aSaver = this.path.value;
            
            this.tooltipText = this.path.value;
          }
        ]]></setter>
      </property>
    </implementation>
  </binding>

  <binding id="setting-font" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title,disabled"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc,disabled"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <xul:menulist anonid="f" oncommand="inputChanged();" flex="1" sizetopopup="pref" xbl:inherits="disabled" maxwidth="200">
          <xul:menupopup anonid="f_mp">
            <xul:menuitem label="monospace" value="monospace" style="font-family: monospace !important;"/>
            <xul:menuseparator anonid="f_mp_s"/>
          </xul:menupopup>
        </xul:menulist>
        <xul:menulist anonid="fs" oncommand="inputChanged();" xbl:inherits="disabled">
          <xul:menupopup anonid="fs_mp">
            <xul:menuitem label=" 8 pt" value="8"/>
            <xul:menuitem label=" 9 pt" value="9"/>
            <xul:menuitem label="10 pt" value="10"/>
            <xul:menuitem label="11 pt" value="11"/>
            <xul:menuitem label="12 pt" value="12"/>
            <xul:menuitem label="13 pt" value="13"/>
            <xul:menuitem label="14 pt" value="14"/>
            <xul:menuitem label="15 pt" value="15"/>
            <xul:menuitem label="16 pt" value="16"/>
            <xul:menuitem label="18 pt" value="18"/>
            <xul:menuitem label="20 pt" value="20"/>
          </xul:menupopup>
        </xul:menulist>
      </xul:hbox>
    </content>

    <implementation>
      <constructor><![CDATA[
        this._timer = Stationery.makeTimer();
        let _this = this; //NOTE: 'this' in timer function is something different
        this._timer.startTimeout(function () { 
          let allFonts = Stationery.fontEnumerator.EnumerateFonts("", "monospace", { value: 0 });
          let itemNode = null;
          for (let i = 0; i < allFonts.length; ++i) {
            let font = allFonts[i];
            let fontLc = font.toLowerCase();
            if (fontLc.includes("courier") || fontLc.includes("mono") || fontLc.includes("consolas") || fontLc.includes("typewriter") || fontLc.includes("ocr-") || fontLc.includes("terminal") || fontLc.includes("console"))
              _this.f_mp.appendChild(Stationery.makeElement(_this.f_mp, 'menuitem', { label: font, attr: [ {name: 'value', value: font}, {name: 'style', value: 'font-family: "' + font + '" !important;'} ] }));
          }

          if (_this.f._value) _this.setMulticontrolValue(_this.f, _this.f._value);          
        }, 100); 
        
      ]]></constructor>
      
      <field name="f">document.getAnonymousElementByAttribute(this, "anonid", "f");</field>
      <field name="f_mp">document.getAnonymousElementByAttribute(this, "anonid", "f_mp");</field>
      <field name="fs">document.getAnonymousElementByAttribute(this, "anonid", "fs");</field>
      <field name="fs_mp">document.getAnonymousElementByAttribute(this, "anonid", "fs_mp");</field>
      <field name="_timer"/>

      <property name="pref_part" readonly="true" onget="return this.getAttribute('pref-part');"/>
      
      <property name="value">
        <getter><![CDATA[
          return {
            f: this.getMulticontrolValue(this.f),
            fs: this.getMulticontrolValue(this.fs)
          };
        ]]></getter>
        <setter><![CDATA[
          this.f._value = val.f; //for timer procedure, if items not builded yet
          this.setMulticontrolValue(this.f, val.f);
          this.setMulticontrolValue(this.fs, val.fs);
        ]]></setter>
      </property>
      
      <method name="getOption"><parameter name="optionName"/><parameter name="defaultValue"/>
        <body><![CDATA[ if (this.hasAttribute(optionName)) return this.getAttribute(optionName) == 'true'; return defaultValue; ]]></body>
      </method>
      
    </implementation>
  </binding>


  
  <binding id="setting-group" extends="chrome://stationery/content/bindings/settings.xml#stationery-setting-base">
    <content>
      <xul:vbox>
        <xul:hbox class="preferences-alignment">
          <xul:label class="preferences-title" flex="1" xbl:inherits="xbl:text=title"/>
        </xul:hbox>
        <xul:description class="preferences-description" flex="1" xbl:inherits="xbl:text=desc"/>
      </xul:vbox>
      <xul:hbox class="preferences-alignment">
        <children />
      </xul:hbox>
    </content>
  </binding>  
  
  <binding id="innersetting-bool" extends="chrome://stationery/content/bindings/settings.xml#setting-bool">
    <content>
      <xul:checkbox anonid="input" xbl:inherits="disabled,onlabel,offlabel,label=title" oncommand="inputChanged();"/>
    </content>
  </binding>
  
</bindings>
